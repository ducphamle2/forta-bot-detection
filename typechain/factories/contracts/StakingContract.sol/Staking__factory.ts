/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Staking,
  StakingInterface,
} from "../../../contracts/StakingContract.sol/Staking";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_rewardToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "timelock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "Stake",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Unstake",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "funds",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lockBlock",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "getLock",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lockBlock",
            type: "uint256",
          },
        ],
        internalType: "struct Staking.Lock",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timelock",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516108f73803806108f783398101604081905261002f916100ad565b6100383361005d565b600180546001600160a01b0319166001600160a01b03929092169190911790556100dd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100bf57600080fd5b81516001600160a01b03811681146100d657600080fd5b9392505050565b61080b806100ec6000396000f3fe60806040526004361061007b5760003560e01c8063a694fc3a1161004e578063a694fc3a1461016b578063e2ae93fb1461017e578063f2fde38b146101c7578063f7c618c1146101e757600080fd5b80632e17de78146100805780636b9db4e6146100a2578063715018a6146101245780638da5cb5b14610139575b600080fd5b34801561008c57600080fd5b506100a061009b366004610725565b610207565b005b3480156100ae57600080fd5b506101046100bd36600461073e565b6040805180820190915260008082526020820152506001600160a01b0316600090815260026020908152604091829020825180840190935280548352600101549082015290565b604080518251815260209283015192810192909252015b60405180910390f35b34801561013057600080fd5b506100a06104c7565b34801561014557600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161011b565b6100a0610179366004610725565b6104db565b34801561018a57600080fd5b506101b261019936600461073e565b6002602052600090815260409020805460019091015482565b6040805192835260208301919091520161011b565b3480156101d357600080fd5b506100a06101e236600461073e565b610602565b3480156101f357600080fd5b50600154610153906001600160a01b031681565b336000908152600260205260409020600101544310156102945760405162461bcd60e51b815260206004820152603f60248201527f43757272656e7420626c6f636b20686569676874206d7573742062652067726560448201527f61746572206f7220657175616c20746f20746865206c6f636b20626c6f636b0060648201526084015b60405180910390fd5b3360009081526002602052604090205461030a5760405162461bcd60e51b815260206004820152603160248201527f4c6f636b20616d6f756e74206d7573742062652067726561746572207468616e6044820152700406040e8de40eadce6e8c2d6ca40cae8d607b1b606482015260840161028b565b3360009081526002602052604090205481111561038f5760405162461bcd60e51b815260206004820152603c60248201527f756e7374616b6520616d6f756e742073686f756c64206265206c657373206f7260448201527f20657175616c20746f20796f7572207374616b656420616d6f756e7400000000606482015260840161028b565b33600090815260026020526040812080548392906103ae908490610784565b90915550506001546000906001600160a01b03166323b872dd6103d96000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152336024820152604481018590526064016020604051808303816000875af115801561042c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610450919061079b565b90508061045c57600080fd5b604051339083156108fc029084906000818181858888f19350505050158015610489573d6000803e3d6000fd5b5060408051338152602081018490527f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd910160405180910390a15050565b6104cf61067b565b6104d960006106d5565b565b6000341161053f5760405162461bcd60e51b815260206004820152602b60248201527f45746820616d6f756e74206465706f7369746564206d7573742062652067726560448201526a061746572207468616e20360ac1b606482015260840161028b565b336000908152600260205260408120805434929061055e9084906107bd565b90915550503360009081526002602052604090206001015443111561059f5761058781436107bd565b336000908152600260205260409020600101556105c7565b33600090815260026020526040812060010180548392906105c19084906107bd565b90915550505b604080518281524360208201527fc9ec05ea5037818736839e1365dc3d9a74a735c447af0697da66633b7a9d0fab910160405180910390a150565b61060a61067b565b6001600160a01b03811661066f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161028b565b610678816106d5565b50565b6000546001600160a01b031633146104d95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161028b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561073757600080fd5b5035919050565b60006020828403121561075057600080fd5b81356001600160a01b038116811461076757600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156107965761079661076e565b500390565b6000602082840312156107ad57600080fd5b8151801515811461076757600080fd5b600082198211156107d0576107d061076e565b50019056fea26469706673582212206b9927391fc990f8667b018d827096b9e7c012a4a7b7f647c296b48e73f1ea8764736f6c634300080a0033";

type StakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Staking__factory extends ContractFactory {
  constructor(...args: StakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Staking> {
    return super.deploy(_rewardToken, overrides || {}) as Promise<Staking>;
  }
  override getDeployTransaction(
    _rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_rewardToken, overrides || {});
  }
  override attach(address: string): Staking {
    return super.attach(address) as Staking;
  }
  override connect(signer: Signer): Staking__factory {
    return super.connect(signer) as Staking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new utils.Interface(_abi) as StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Staking {
    return new Contract(address, _abi, signerOrProvider) as Staking;
  }
}
